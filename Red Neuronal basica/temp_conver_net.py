# -*- coding: utf-8 -*-
"""temp_conver_net.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dP6TWKvj3_lkDFhyedBBpmYD1J1Gc2EI

#Elaborado por Víctor Muñoz en base a video de Ringa Tech.      
Se deseea implementar una red neuronal simple que realice la conversión de unidades de temperatura de grados celsius a grados fahrenheit, sin necesidad de ingresar la ecuación de conversión durante la programación

importando librerias.  
tenserflow --> libreria para inteligencia artificial     
numpy --> para arreglos numericos
"""

import tensorflow as tf
import numpy as np

"""Arreglos de entrada y salida para entrenamiento de la red neuronal"""

celsius = np.array([-40, 10, 15, 23, 45, 96, 18], dtype=float)
fahrenheit = np.array([-40, 50, 59, 73, 113, 204.8, 64.4 ], dtype=float)

"""Asignación de la capa de salida de tipo densa (Conexión de cada neurona hacia todas las neuronas de la siguiente capa) utilizando keras para utilizar las redes neuronales de manera simple """

layer = tf.keras.layers.Dense(units=1, input_shape = [1])
#creación del modelo con keras, de tipo secuencial
model = tf.keras.models.Sequential([layer])

"""Compilación del modelo por medio de un optimizador Adam y la función de perdida(error cuadratico medio).

"""

model.compile (
    optimizer = tf.keras.optimizers.Adam(learning_rate=0.09),
    loss = 'mean_squared_error'
)

"""Una vez compilado el modelo, se procede a entrenarlo:"""

print("Comenzando entrenamiento...")
history = model.fit(celsius,fahrenheit,epochs=1000,verbose = False)
print("Entrenamiento finalizado")

"""Graficando la función de perdida:"""

import matplotlib.pyplot as plt
plt.xlabel("# de epoca")
plt.ylabel("Magnitud de perdida")
plt.plot(history.history['loss'])

"""Con 500 vueltas hubiera bastado...
Realicemos una prediccón
"""

print("Realizando una predicción")
result = model.predict([58])
print("El resultado de la conversión es: "+ str(result) + "fahrenheit")